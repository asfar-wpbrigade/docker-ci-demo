name: CI-CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/app

jobs:
  build_test_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Run Unit Tests
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            python:3.12-slim \
            bash -c "pip install --no-cache-dir -r requirements.txt pytest && PYTHONPATH=. pytest -q --junitxml=report.xml"

      - name: SonarCloud Scan (SAST)
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.organization=asfar-wpbrigade
            -Dsonar.projectKey=asfar-wpbrigade_docker-ci-demo
            -Dsonar.projectName=docker-ci-demo
            -Dsonar.projectVersion=1.0
            -Dsonar.sources=.
            -Dsonar.python.version=3.12
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dependency Scan (Trivy)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          severity: HIGH,CRITICAL
          exit-code: 1

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: report.xml

      - name: Push to Staging
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                     ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging

  promote_to_prod:
    needs: build_test_scan
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://github.com/${{ github.repository }}
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Promote to Prod
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging \
                     ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod
